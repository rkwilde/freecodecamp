Information Security and Quality Assurance




/*************************************************************/
/*************************************************************/
/********** Information Security with HelmetJS ***************/
/*************************************************************/
/*************************************************************/

HelmetJS
    what is it
        express-based middleware
        set HTTP headers automatically to prevent accidental info passing
        Content Security Policy, XSS Filtering, HTTP Strict Transport Security, others
    get helmet package from npm, then let helmet=require("helmet");
    app.use(helmet.hidePoweredBy()) to remove X-Powered-By header so attackers don't know you're using express
    app.use(helmet.hidePoweredBy({ setTo: 'PHP 4.2.0' })) to lie about your framework
    helmet.frameguard({action: 'deny'})
        don't allow iframing (to avoid clickjacking)
        by setting X-Frame-Options (modes are DENY, SAMEORIGIN, and ALLOW-FROM)
    app.use(helmet.xssFilter()) to set X-XSS-Protection header that gives some basic XSS protection if supported
    app.use(helmet.noSniff()) to set X-Content-Type-Options and prevent MIME sniffing
    app.use(helmet.ieNoOpen()) to set X-Download-Options and prevent IE from allowing untrusted HTML pages to operate in your site's context
    app.use(helmet.hsts({maxAge:ninetyDaysInMilliseconds,force:true}))  to set Strict-Transport-Security and prevent HTTP (protocol downgrade attacks and cookie hijacking)
        force:true is just because glitch is already using HTTPS
        note that configuring HTTPS on a custom website requires the acquisition of a domain and a SSL/TSL Certificate
    app.use(helmet.dnsPrefetchControl()) to disable DNS prefetch. More secure, but loses the performance improvement of DNS prefetching
    app.use(helmet())
        does all the protections listed above automatically
        doesn't do noCache or contentSecurityPolicy by default
    app.use(helmet.noCache()) to tell the browser not to use a cached version, like if you rolled an update or something
        doesn't always work, and loses performance improvement from caching
    app.use(helmet.contentSecurityPolicy({directives: {defaultSrc:["'self'"],scriptSrc:["'self'","trusted-cdn.com"]}})) to only allow scripts from the site itself and trusted-cdn.com
    app.use(helmet({frameguard: { action: 'deny'},contentSecurityPolicy: { directives: {defaultSrc: ["self"],styleSrc: ['style.com'],}},dnsPrefetchControl: false // disable}))
        example of setting protections directly within helmet() function

BCrypt
    asynchronous
        bcrypt.hash(myPlaintextPassword, saltRounds, (err, hash) => { /*Store hash in your db*/ });
        bcrypt.compare(myPlaintextPassword, hash, (err, res) => { /*res == true or false*/ });
            to see if new input is the same as the old hash
            put this in callback of hash function because it uses generated hash as an input
    synchronous
        bcrypt.hashSync(myPlaintextPassword, saltRounds);
        bcrypt.compareSync(myPlaintextPassword, hash);